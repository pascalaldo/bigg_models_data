#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
from os import mkdir, rename
from os.path import isdir, isfile, join
from Bio import Entrez

Entrez.email = os.environ["NCBI_EMAIL"]
Entrez.api_key = os.environ.get("NCBI_API_KEY")

FOLDER_NAME = '/genbank'

class NotFoundError(Exception):
    pass

def main():
    if not isdir(FOLDER_NAME):
        mkdir(FOLDER_NAME)

    with open('model-genome.txt') as infile:
        for line in infile:
            if line.strip().startswith('#'):
                continue

            split = line.split()
            if len(split) != 3:
                continue
            model, _, acc_string = split

            if acc_string.startswith('ncbi_accession:'):
                assembly = None
                accessions = [x.strip().replace('.gb', '') for x in
                            acc_string.replace('ncbi_accession:', '').split(',')]
            elif acc_string.startswith('ncbi_assembly:'):
                sp = acc_string.replace('ncbi_assembly:', '').split(',')
                assembly = None if sp[0].strip() == 'None' else sp[0]
                accessions = [x.strip().replace('.gb', '') for x in sp[1:]]
            else:
                print('Bad accession for ' + model)
                continue

            if assembly is None and len(accessions) == 0:
                print('No genome found for ' + model)
                continue

            if assembly is not None:
                print("""Cannot automatically download assemblies. Be sure that all gb files are listed.""")
                # The following code /almost/ works, but assemblies match to
                # incorrect annotation files for an unknown reason.

                # # https://www.biostars.org/p/141581/
                # # Search Name for ID
                # results = Entrez.read(Entrez.esearch(db='nucleotide', term=assembly))
                # if len(results['IdList']) == 0:
                #     print('No accessions found for assembly %s for %s' % (assembly, model))
                #     continue
                # pool.map(partial(download_for_id, assembly, model), results['IdList'])

            # Can have assembly and accessions
            download_for_accession(model, accessions)


def gen_filepath(accession):
    return join(FOLDER_NAME, accession + '.gb')

def download_gb(genome_id, filepath):
    # First download to a temporary filepath
    temp_filepath = filepath + '.tmp'
    dl = Entrez.efetch(db='nuccore', id=genome_id, rettype='gbwithparts', retmode='text')
    with open(temp_filepath, 'w') as f:
        f.write(dl.read())
    dl.close()
    # Then move to the final filepath. This is less likely to get interrupted.
    rename(temp_filepath, filepath)

def download_for_id(assembly, model, genome_id):
    # Get accession
    summary = Entrez.read(Entrez.esummary(db='nucleotide', id=genome_id, retmax=1))
    accession = summary[0]['AccessionVersion']
    filepath = gen_filepath(accession)
    if isfile(gen_filepath(accession)):
        print('Already downloaded %s in %s for %s' % (accession, assembly, model))
        return
    print('Downloading genome %s in %s for %s' % (accession, assembly, model))
    download_gb(genome_id, filepath)

def download_for_accession(model, accession):
    filepath = gen_filepath(accession)
    if isfile(gen_filepath(accession)):
        print('Already downloaded %s for %s' % (accession, model))
        return

    search = Entrez.esearch(db='nucleotide', term=accession, retmax=1)
    search_result = Entrez.read(search)
    search.close()

    try:
        genome_id = search_result['IdList'][0]
    except IndexError:
        print('No genome found with accession %s for %s' % (accession, model))
        return

    print('Downloading genome %s (id=%s) for %s' % (accession, genome_id, model))
    download_gb(genome_id, filepath)


if __name__ == '__main__':
    main()
